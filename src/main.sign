typedef struct {
	bool lex;
	bool parse;
	bool resolve;
	bool gen;
} Options;

void printVersion(void) {
	printf("signc version " STRINGIFY(SIGNCVERSION) "\n");
	printf("Target: C\n");
}

void printUsage(char* self) {
	printf("Usage: %s <option> <file>...\n", self);
	printf("Options:\n");
	printf("  -l                       Lex and output tokens\n");
	printf("  -p                       Parse and output ast\n");
	printf("  -r                       Resolve and output errors\n");
	printf("  -g                       Codegen and output C\n");
	printf("  -h                       Print this help\n");
	printf("  -v                       Print the version\n");
}

void sign_main(char** files, size_t fileCount, Options* options) {
	char* code;
	size_t codeLength = readFiles(files, fileCount, &code);
	
	size_t tokensCount;
	Token** tokens = Lex(code, codeLength, &tokensCount);
	if (options->lex) {
		printTokens(false, tokens, tokensCount);
		return;
	}
	
	size_t declarationsCount;
	Declaration** declarations = Parse(tokens, tokensCount, &declarationsCount);
	if (options->parse) {
		printDeclarations(declarations, declarationsCount);
		return;
	}
	
	if (options->resolve) {
		return;
	}
	
	if (options->gen) {
		Codegen(declarations, declarationsCount);
	}
}

int main(int argc, char** argv) {
	if (argc < 3) {
		printUsage(argv[0]);
		exit(EXIT_FAILURE);
	}
	
	if (!(argv[1][0] == 45)) {
		printUsage(argv[0]);
		exit(EXIT_FAILURE);
	}
	if (!(argv[1][2] == 0)) {
		printUsage(argv[0]);
		exit(EXIT_FAILURE);
	}
	
	Options* options = xcalloc(1, sizeof(Options));
	options->lex = false;
	options->parse = false;
	options->resolve = false;
	options->gen = false;
	
	char argument = argv[1][1];
	if (argument == 108) {
		options->lex = true;
	} else if (argument == 112) {
		options->parse = true;
	} else if (argument == 114) {
		options->resolve = true;
	} else if (argument == 103) {
		options->gen = true;
	} else if (argument == 104) {
		printUsage(argv[0]);
		exit(EXIT_SUCCESS);
	} else if (argument == 118) {
		printVersion();
		exit(EXIT_SUCCESS);
	} else {
		printUsage(argv[0]);
		exit(EXIT_FAILURE);
	}
	sign_main(&argv[2], (size_t)argc-2, options);
	
	exit(EXIT_SUCCESS);
}
