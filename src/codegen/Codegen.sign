void Codegen(Declaration** declarations, size_t count) {
	printf("#include <ctype.h>\n");
	printf("#include <stdbool.h>\n");
	printf("#include <stddef.h>\n");
	printf("#include <stdio.h>\n");
	printf("#include <stdlib.h>\n");
	printf("#include <string.h>\n");
	printf("\n");
	
	for (size_t i = 0; i < count; ++i) {
		Declaration* decl = declarations[i];
		if (decl->kind == DeclarationKind_Struct) {
			Token* name = decl->start[decl->count - 2];
			char* start = name->value;
			int length = (int)name->length;
			printf("typedef struct %.*s %.*s;\n", length, start, length, start);
		}
	}
	printf("\n");
	
	for (size_t i = 0; i < count; ++i) {
		Declaration* decl = declarations[i];
		if (decl->kind == DeclarationKind_Struct) {
			Token* name = decl->start[decl->count - 2];
			char* start = name->value;
			int length = (int)name->length;
			printf("struct %.*s ", length, start);
			decl->start += 2;
			decl->count -= 4;
			printDeclaration(decl);
			printf(";\n");
		}
	}
	printf("\n");
	
	for (size_t i = 0; i < count; ++i) {
		Declaration* decl = declarations[i];
		if (decl->kind == DeclarationKind_Var) {
			printDeclaration(decl);
		}
	}
	printf("\n");
	
	Declaration* temp = newDeclaration();
	for (size_t i = 0; i < count; ++i) {
		Declaration* decl = declarations[i];
		if (decl->kind == DeclarationKind_Func) {
			temp->start = decl->start;
			temp->count = 0;
			while (!(temp->start[temp->count]->kind == TokenKind_OpenCurly)) {
				++temp->count;
			}
			printDeclaration(temp);
			printf(";\n");
		}
	}
	printf("\n");
	
	for (size_t i = 0; i < count; ++i) {
		Declaration* decl = declarations[i];
		if (decl->kind == DeclarationKind_Func) {
			printDeclaration(decl);
		}
	}
	printf("\n");
}
