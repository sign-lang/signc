Token** Lex(char* code, size_t codeLength, size_t* outTokenCount) {
	InitTokenKinds();
	
	Token** tokens = xcalloc(codeLength, sizeof(Token*));
	*outTokenCount = 0;
	
	while (true) {
		Token* token;
		
		if (*code == 32) {
			while (isspace(*code)) { ++code; };
		} else if (*code == 9) {
			while (isspace(*code)) { ++code; };
		} else if (*code == 10) {
			while (isspace(*code)) { ++code; };
		} else if (*code == 47) {
			while (!(*code == 10)) { ++ code; };
		} else if (*code == 44) {
			token = newToken();
			token->kind = TokenKind_Comma;
			token->value = code++;
			token->length = 1;
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 58) {
			token = newToken();
			token->kind = TokenKind_Colon;
			token->value = code++;
			token->length = 1;
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 59) {
			token = newToken();
			token->kind = TokenKind_Semicolon;
			token->value = code++;
			token->length = 1;
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 123) {
			token = newToken();
			token->kind = TokenKind_OpenCurly;
			token->value = code++;
			token->length = 1;
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 125) {
			token = newToken();
			token->kind = TokenKind_CloseCurly;
			token->value = code++;
			token->length = 1;
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 91) {
			token = newToken();
			token->kind = TokenKind_OpenBracket;
			token->value = code++;
			token->length = 1;
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 93) {
			token = newToken();
			token->kind = TokenKind_CloseBracket;
			token->value = code++;
			token->length = 1;
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 40) {
			token = newToken();
			token->kind = TokenKind_OpenParenthesis;
			token->value = code++;
			token->length = 1;
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 41) {
			token = newToken();
			token->kind = TokenKind_CloseParenthesis;
			token->value = code++;
			token->length = 1;
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 42) {
			token = newToken();
			token->kind = TokenKind_Star;
			token->value = code++;
			token->length = 1;
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 38) {
			token = newToken();
			token->kind = TokenKind_And;
			token->value = code++;
			token->length = 1;
			if (*code == 38) {
				++code;
				token->kind = TokenKind_AndAnd;
				token->length = 2;
			};
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 124) {
			token = newToken();
			token->kind = TokenKind_Invalid;
			token->value = code++;
			token->length = 1;
			if (*code == 124) {
				++code;
				token->kind = TokenKind_OrOr;
				token->length = 2;
			};
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 43) {
			token = newToken();
			token->kind = TokenKind_Plus;
			token->value = code++;
			token->length = 1;
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 45) {
			token = newToken();
			token->kind = TokenKind_Minus;
			token->value = code++;
			token->length = 1;
			if (*code == 62) {
				++code;
				token->kind = TokenKind_Arrow;
				token->length = 2;
			};
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 33) {
			token = newToken();
			token->kind = TokenKind_Not;
			token->value = code++;
			token->length = 1;
			if (*code == 61) {
				++code;
				token->kind = TokenKind_Invalid;
				token->length = 2;
			};
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 61) {
			token = newToken();
			token->kind = TokenKind_Equal;
			token->value = code++;
			token->length = 1;
			if (*code == 61) {
				++code;
				token->kind = TokenKind_EqualEqual;
				token->length = 2;
			};
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 60) {
			token = newToken();
			token->kind = TokenKind_LessThan;
			token->value = code++;
			token->length = 1;
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 34) {
			token = newToken();
			token->kind = TokenKind_StringLiteral;
			token->value = ++code;
			while (!(*code == 34)) {
				++code;
				++token->length;
			};
			++code;
			tokens[(*outTokenCount)++] = token;
		} else if (
			!(*code < 48) &&
			(*code < 58)) {
			token = newToken();
			token->kind = TokenKind_IntegerLiteral;
			token->value = code;
			while (isdigit(*code)) {
				++code;
				++token->length;
			};
			tokens[(*outTokenCount)++] = token;
		} else if (
			(
				!(*code < 65) &&
				(*code < 91)
			) ||
			(
				!(*code < 97) &&
				(*code < 123)
			) ||
			(
				(*code == 95)
			)) {
			token = newToken();
			token->value = code;
			while (isalnum(*code) || *code == 95) {
				++code;
				++token->length;
			}
			if (token->length == 3 && strncmp(token->value, "var",  token->length) == 0) {
				token->kind = TokenKind_Var;
			} else if (token->length == 4 && strncmp(token->value, "func",  token->length) == 0) {
				token->kind = TokenKind_Func;
			} else if (token->length == 6 && strncmp(token->value, "struct", token->length) == 0) {
				token->kind = TokenKind_Struct;
			} else if (token->length == 2 && strncmp(token->value, "if", token->length) == 0) {
				token->kind = TokenKind_If;
			} else if (token->length == 4 && strncmp(token->value, "else", token->length) == 0) {
				token->kind = TokenKind_Else;
			} else if (token->length == 5 && strncmp(token->value, "while", token->length) == 0) {
				token->kind = TokenKind_While;
			} else if (token->length == 6 && strncmp(token->value, "return",  token->length) == 0) {
				token->kind = TokenKind_Return;
			} else if (token->length == 4 && strncmp(token->value, "true",  token->length) == 0) {
				token->kind = TokenKind_BooleanLiteral;
			} else if (token->length == 5 && strncmp(token->value, "false",  token->length) == 0) {
				token->kind = TokenKind_BooleanLiteral;
			} else {
				token->kind = TokenKind_Identifier;
			}
			tokens[(*outTokenCount)++] = token;
		} else if (*code == 0) {
			token = newToken();
			token->kind = TokenKind_EOF;
			token->value = code++;
			token->length = 1;
			tokens[(*outTokenCount)++] = token;
			return tokens;
		} else {
			printTokens(true, tokens, *outTokenCount);
			if (isprint(*code)) {
				fprintf(stderr, "Unexpected character: '%c'%c", *code, 10);
			} else {
				fprintf(stderr, "Unexpected character: %02X%c", *code, 10);
			};
			exit(EXIT_FAILURE);
		}
	}
}
